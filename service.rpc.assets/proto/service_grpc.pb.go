// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: service.rpc.assets/proto/service.proto

package assetsproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AssetsService_CreateAsset_FullMethodName = "/emre.AssetsService/CreateAsset"
	AssetsService_GetAsset_FullMethodName    = "/emre.AssetsService/GetAsset"
	AssetsService_ListAssets_FullMethodName  = "/emre.AssetsService/ListAssets"
	AssetsService_BuyAsset_FullMethodName    = "/emre.AssetsService/BuyAsset"
	AssetsService_SellAsset_FullMethodName   = "/emre.AssetsService/SellAsset"
)

// AssetsServiceClient is the client API for AssetsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssetsServiceClient interface {
	CreateAsset(ctx context.Context, in *CreateAssetRequest, opts ...grpc.CallOption) (*Asset, error)
	GetAsset(ctx context.Context, in *GetAssetRequest, opts ...grpc.CallOption) (*Asset, error)
	ListAssets(ctx context.Context, in *ListAssetsRequest, opts ...grpc.CallOption) (*ListAssetsResponse, error)
	BuyAsset(ctx context.Context, in *BuyAssetRequest, opts ...grpc.CallOption) (*Asset, error)
	SellAsset(ctx context.Context, in *SellAssetRequest, opts ...grpc.CallOption) (*Asset, error)
}

type assetsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAssetsServiceClient(cc grpc.ClientConnInterface) AssetsServiceClient {
	return &assetsServiceClient{cc}
}

func (c *assetsServiceClient) CreateAsset(ctx context.Context, in *CreateAssetRequest, opts ...grpc.CallOption) (*Asset, error) {
	out := new(Asset)
	err := c.cc.Invoke(ctx, AssetsService_CreateAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) GetAsset(ctx context.Context, in *GetAssetRequest, opts ...grpc.CallOption) (*Asset, error) {
	out := new(Asset)
	err := c.cc.Invoke(ctx, AssetsService_GetAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) ListAssets(ctx context.Context, in *ListAssetsRequest, opts ...grpc.CallOption) (*ListAssetsResponse, error) {
	out := new(ListAssetsResponse)
	err := c.cc.Invoke(ctx, AssetsService_ListAssets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) BuyAsset(ctx context.Context, in *BuyAssetRequest, opts ...grpc.CallOption) (*Asset, error) {
	out := new(Asset)
	err := c.cc.Invoke(ctx, AssetsService_BuyAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) SellAsset(ctx context.Context, in *SellAssetRequest, opts ...grpc.CallOption) (*Asset, error) {
	out := new(Asset)
	err := c.cc.Invoke(ctx, AssetsService_SellAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssetsServiceServer is the server API for AssetsService service.
// All implementations must embed UnimplementedAssetsServiceServer
// for forward compatibility
type AssetsServiceServer interface {
	CreateAsset(context.Context, *CreateAssetRequest) (*Asset, error)
	GetAsset(context.Context, *GetAssetRequest) (*Asset, error)
	ListAssets(context.Context, *ListAssetsRequest) (*ListAssetsResponse, error)
	BuyAsset(context.Context, *BuyAssetRequest) (*Asset, error)
	SellAsset(context.Context, *SellAssetRequest) (*Asset, error)
	mustEmbedUnimplementedAssetsServiceServer()
}

// UnimplementedAssetsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAssetsServiceServer struct {
}

func (UnimplementedAssetsServiceServer) CreateAsset(context.Context, *CreateAssetRequest) (*Asset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAsset not implemented")
}
func (UnimplementedAssetsServiceServer) GetAsset(context.Context, *GetAssetRequest) (*Asset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAsset not implemented")
}
func (UnimplementedAssetsServiceServer) ListAssets(context.Context, *ListAssetsRequest) (*ListAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAssets not implemented")
}
func (UnimplementedAssetsServiceServer) BuyAsset(context.Context, *BuyAssetRequest) (*Asset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyAsset not implemented")
}
func (UnimplementedAssetsServiceServer) SellAsset(context.Context, *SellAssetRequest) (*Asset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellAsset not implemented")
}
func (UnimplementedAssetsServiceServer) mustEmbedUnimplementedAssetsServiceServer() {}

// UnsafeAssetsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssetsServiceServer will
// result in compilation errors.
type UnsafeAssetsServiceServer interface {
	mustEmbedUnimplementedAssetsServiceServer()
}

func RegisterAssetsServiceServer(s grpc.ServiceRegistrar, srv AssetsServiceServer) {
	s.RegisterService(&AssetsService_ServiceDesc, srv)
}

func _AssetsService_CreateAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).CreateAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_CreateAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).CreateAsset(ctx, req.(*CreateAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_GetAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).GetAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_GetAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).GetAsset(ctx, req.(*GetAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_ListAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).ListAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_ListAssets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).ListAssets(ctx, req.(*ListAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_BuyAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).BuyAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_BuyAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).BuyAsset(ctx, req.(*BuyAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_SellAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SellAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).SellAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_SellAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).SellAsset(ctx, req.(*SellAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AssetsService_ServiceDesc is the grpc.ServiceDesc for AssetsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssetsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "emre.AssetsService",
	HandlerType: (*AssetsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAsset",
			Handler:    _AssetsService_CreateAsset_Handler,
		},
		{
			MethodName: "GetAsset",
			Handler:    _AssetsService_GetAsset_Handler,
		},
		{
			MethodName: "ListAssets",
			Handler:    _AssetsService_ListAssets_Handler,
		},
		{
			MethodName: "BuyAsset",
			Handler:    _AssetsService_BuyAsset_Handler,
		},
		{
			MethodName: "SellAsset",
			Handler:    _AssetsService_SellAsset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.rpc.assets/proto/service.proto",
}
